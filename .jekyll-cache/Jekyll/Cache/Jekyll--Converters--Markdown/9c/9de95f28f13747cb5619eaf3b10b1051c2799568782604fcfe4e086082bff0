I""<p>ttttttteeeessssttttt</p>

<h2 id="time_zone">TIME_ZONE</h2>
<p>Django에서 기본으로 지정된 Time Zone은 ‘UTC’이다. 기본 Time Zone을 변경하기 위해서는 <code class="language-plaintext highlighter-rouge">settings.py</code>에서  <code class="language-plaintext highlighter-rouge">TIME_ZONE</code>옵션을 지정해주어야 한다.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span> <span class="n">TIME_ZONE</span> <span class="o">=</span> <span class="s">'UTC'</span>
<span class="n">TIME_ZONE</span> <span class="o">=</span> <span class="s">'Asia/Seoul'</span>
<span class="n">USE_TZ</span> <span class="o">=</span> <span class="bp">True</span> 
</code></pre></div></div>

<p><br /></p>

<h2 id="use_tz">USE_TZ</h2>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">True</code>와 <code class="language-plaintext highlighter-rouge">False</code>로 Time Zone 사용을 명시한다. (timezone-aware의 사용 여부)</p>
</blockquote>

<p><strong>True</strong>: default 값이 UTC가 되며 templates, forms의 datetime에만 <code class="language-plaintext highlighter-rouge">settings.py</code>에서 설정한 <code class="language-plaintext highlighter-rouge">TIME_ZONE</code>을 적용한다.</p>

<p><strong>False</strong>:  <code class="language-plaintext highlighter-rouge">TIME_ZONE</code>으로 설정한 시간대는 모든 datetime을 저장할 때 사용된다.</p>

<p>시간을 저장할 때 옵션을 <code class="language-plaintext highlighter-rouge">False</code>로 지정하여  <code class="language-plaintext highlighter-rouge">TIME_ZONE</code>에 지정한 시간대를 기준으로 데이터베이스에 저장할 수 있다. 하지만 장기적으로 보존할 시간은 <code class="language-plaintext highlighter-rouge">utc</code>로 저장하고 각 나라의 위치에 맞게 보여주는 것을 권장한다.</p>

<p><br /></p>

<h2 id="naive-datetime--aware-datetime">Naive Datetime / Aware Datetime</h2>
<p><strong>Naive Datetime</strong>: <code class="language-plaintext highlighter-rouge">tzinfo</code>가 없기 때문에 어느 시간대를 기준으로 하는 시각인지 모호하다.</p>

<p>아래와 같이 <code class="language-plaintext highlighter-rouge">datetime.now()</code> 또는 <code class="language-plaintext highlighter-rouge">datetime.today()</code> 으로 현재 시각을 가져오는 경우 <code class="language-plaintext highlighter-rouge">TIME_ZONE</code>설정에 따라 시간 값이 나오지만 <code class="language-plaintext highlighter-rouge">tzinfo</code> 정보가 없는 <code class="language-plaintext highlighter-rouge">Naive Datetime</code> 객체이다. 이 시간 값을 데이터베이스에 저장하면 UTC 기준의 시각으로 저장되어 모델을 통해 시간 값을 읽어올 경우 UTC가 기준인 <code class="language-plaintext highlighter-rouge">Aware Datetime</code> 객체를 가져오게 된다.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span> <span class="o">//</span> <span class="n">time</span><span class="o">-</span><span class="n">zone</span> <span class="n">naive</span> <span class="n">datetime</span>
<span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">102020</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Aware Datetime</strong>: <code class="language-plaintext highlighter-rouge">tzinfo</code>를 가지고 있다. 기준이 되는 시간대를 포함하고 있어 사용을 권장한다.</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.utils</span> <span class="kn">import</span> <span class="n">timezone</span>

<span class="n">now</span> <span class="o">=</span> <span class="n">timezone</span><span class="p">.</span><span class="n">now</span><span class="p">()</span> <span class="o">//</span> <span class="n">time</span><span class="o">-</span><span class="n">zone</span><span class="o">-</span><span class="n">aware</span> <span class="n">datetime</span>
<span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">102020</span> <span class="n">tzinfo</span><span class="o">=</span><span class="p">)</span>
</code></pre></div></div>

<p>같은 <code class="language-plaintext highlighter-rouge">2021-01-01 00:00:00</code>이라도 해당 시각이 어느 나라, 어떤 시간대에서 호출했는지 알 수 없기 때문에 기준이 되는 시간대 정보가 필요하다. 
따라서 기준점이 확실한 <code class="language-plaintext highlighter-rouge">Aware Datetime</code>을 사용하는 것이 좋다.</p>

<p><code class="language-plaintext highlighter-rouge">Naive Datetime</code>과 <code class="language-plaintext highlighter-rouge">Aware Datetime</code>은 서로 <strong>대소 비교와 연산이 불가능</strong>하기 때문에 섞어서 사용하지 못한다. 
따라서 한 가지의 <code class="language-plaintext highlighter-rouge">Datetime</code>으로 통일할 필요가 있는데 위에서 언급했듯이 시간대 정보를 포함하고 있는 <strong><code class="language-plaintext highlighter-rouge">Aware Datetime</code></strong>으로 통일하는 것이 권장된다.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">python</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span> <span class="o">//</span> <span class="n">Naive</span> <span class="n">Datetime</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">timezone</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span> <span class="o">//</span> <span class="n">Aware</span> <span class="n">Datetime</span>
<span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="o">//</span> <span class="nb">TypeError</span>
</code></pre></div></div>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">timezone.now()</code></td>
      <td>UTC 기준인 aware 객체.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">timezone.localtime()</code></td>
      <td>KST 기준인 aware 객체. <code class="language-plaintext highlighter-rouge">.date()</code>를 통해 날짜만 얻을 경우 utc 기준으로 얻는 날짜는 하루 전일 수도 있다.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">timezone.make_aware()</code></td>
      <td>Naive 객체를 Aware 객체로 변환, 부득이 하게 Naive 객체를 사용해야할 때 Aware 객체로 바꿔주기 위해 사용한다.</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<hr />
<p>참고</p>

<p><a href="https://docs.djangoproject.com/en/3.1/ref/utils/#django.utils.timezone.make_aware">https://docs.djangoproject.com/en/3.1/ref/utils/#django.utils.timezone.make_aware</a></p>

<p><a href="https://8percent.github.io/2017-05-31/django-timezone-problem/">https://8percent.github.io/2017-05-31/django-timezone-problem/</a></p>

<p><a href="https://velog.io/@arara90/js-Django-Timezone-%EC%A0%81%EC%A0%88%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0">https://velog.io/@arara90/js-Django-Timezone-%EC%A0%81%EC%A0%88%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0</a></p>
:ET